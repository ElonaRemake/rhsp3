/* automatically generated by rust-bindgen 0.61.0 */

pub type PDAT = *mut ::std::os::raw::c_void;
pub type APTR = ::std::os::raw::c_int;
pub const CALCCODE_ADD: _bindgen_ty_1 = 0;
pub const CALCCODE_SUB: _bindgen_ty_1 = 1;
pub const CALCCODE_MUL: _bindgen_ty_1 = 2;
pub const CALCCODE_DIV: _bindgen_ty_1 = 3;
pub const CALCCODE_MOD: _bindgen_ty_1 = 4;
pub const CALCCODE_AND: _bindgen_ty_1 = 5;
pub const CALCCODE_OR: _bindgen_ty_1 = 6;
pub const CALCCODE_XOR: _bindgen_ty_1 = 7;
pub const CALCCODE_EQ: _bindgen_ty_1 = 8;
pub const CALCCODE_NE: _bindgen_ty_1 = 9;
pub const CALCCODE_GT: _bindgen_ty_1 = 10;
pub const CALCCODE_LT: _bindgen_ty_1 = 11;
pub const CALCCODE_GTEQ: _bindgen_ty_1 = 12;
pub const CALCCODE_LTEQ: _bindgen_ty_1 = 13;
pub const CALCCODE_RR: _bindgen_ty_1 = 14;
pub const CALCCODE_LR: _bindgen_ty_1 = 15;
pub const CALCCODE_MAX: _bindgen_ty_1 = 16;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct PVal {
    pub flag: ::std::os::raw::c_short,
    pub mode: ::std::os::raw::c_short,
    pub len: [::std::os::raw::c_int; 5usize],
    pub size: ::std::os::raw::c_int,
    pub pt: *mut ::std::os::raw::c_char,
    pub master: *mut ::std::os::raw::c_void,
    pub support: ::std::os::raw::c_ushort,
    pub arraycnt: ::std::os::raw::c_short,
    pub offset: ::std::os::raw::c_int,
    pub arraymul: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PVal() {
    const UNINIT: ::std::mem::MaybeUninit<PVal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<PVal>(), 48usize, concat!("Size of: ", stringify!(PVal)));
    assert_eq!(
        ::std::mem::align_of::<PVal>(),
        4usize,
        concat!("Alignment of ", stringify!(PVal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(mode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(pt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(master))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).support) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arraycnt) as usize - ptr as usize },
        38usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(arraycnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arraymul) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(PVal), "::", stringify!(arraymul))
    );
}
impl Default for PVal {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HspVarProc {
    pub flag: ::std::os::raw::c_short,
    pub aftertype: ::std::os::raw::c_short,
    pub version: ::std::os::raw::c_short,
    pub support: ::std::os::raw::c_ushort,
    pub basesize: ::std::os::raw::c_short,
    pub opt: ::std::os::raw::c_short,
    pub vartype_name: *mut ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_char,
    pub Cnv: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *const ::std::os::raw::c_void,
            flag: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub CnvCustom: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *const ::std::os::raw::c_void,
            flag: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetPtr: ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal) -> *mut PDAT>,
    pub ArrayObjectRead: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            mptype: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ArrayObject: ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal)>,
    pub ObjectWrite: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            data: *mut ::std::os::raw::c_void,
            type_: ::std::os::raw::c_int,
        ),
    >,
    pub ObjectMethod: ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal)>,
    pub Alloc: ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal, pval2: *const PVal)>,
    pub Free: ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal)>,
    pub GetSize:
        ::std::option::Option<unsafe extern "C" fn(pdat: *const PDAT) -> ::std::os::raw::c_int>,
    pub GetUsing:
        ::std::option::Option<unsafe extern "C" fn(pdat: *const PDAT) -> ::std::os::raw::c_int>,
    pub GetBlockSize: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            pdat: *mut PDAT,
            size: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub AllocBlock: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PVal, pdat: *mut PDAT, size: ::std::os::raw::c_int),
    >,
    pub Set: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PVal, pdat: *mut PDAT, in_: *const ::std::os::raw::c_void),
    >,
    pub AddI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub SubI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub MulI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub DivI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub ModI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub AndI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub OrI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub XorI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub EqI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub NeI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub GtI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub LtI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub GtEqI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub LtEqI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub RrI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
    pub LrI: ::std::option::Option<
        unsafe extern "C" fn(pval: *mut PDAT, val: *const ::std::os::raw::c_void),
    >,
}
#[test]
fn bindgen_test_layout_HspVarProc() {
    const UNINIT: ::std::mem::MaybeUninit<HspVarProc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HspVarProc>(),
        140usize,
        concat!("Size of: ", stringify!(HspVarProc))
    );
    assert_eq!(
        ::std::mem::align_of::<HspVarProc>(),
        4usize,
        concat!("Alignment of ", stringify!(HspVarProc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aftertype) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(aftertype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).support) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basesize) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(basesize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        10usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(opt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vartype_name) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(vartype_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(user))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Cnv) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(Cnv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CnvCustom) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(CnvCustom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPtr) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(GetPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArrayObjectRead) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(ArrayObjectRead))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArrayObject) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(ArrayObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ObjectWrite) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(ObjectWrite))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ObjectMethod) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(ObjectMethod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Alloc) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(Alloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Free) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(Free))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSize) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(GetSize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetUsing) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(GetUsing))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBlockSize) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(GetBlockSize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocBlock) as usize - ptr as usize },
        68usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(AllocBlock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Set) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(Set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddI) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(AddI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubI) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(SubI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MulI) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(MulI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DivI) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(DivI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ModI) as usize - ptr as usize },
        92usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(ModI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AndI) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(AndI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OrI) as usize - ptr as usize },
        100usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(OrI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XorI) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(XorI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EqI) as usize - ptr as usize },
        108usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(EqI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NeI) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(NeI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GtI) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(GtI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LtI) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(LtI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GtEqI) as usize - ptr as usize },
        124usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(GtEqI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LtEqI) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(LtEqI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RrI) as usize - ptr as usize },
        132usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(RrI))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LrI) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(HspVarProc), "::", stringify!(LrI))
    );
}
impl Default for HspVarProc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HSPVAR_COREFUNC = ::std::option::Option<unsafe extern "C" fn(arg1: *mut HspVarProc)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct FlexValue {
    pub type_: ::std::os::raw::c_short,
    pub myid: ::std::os::raw::c_short,
    pub customid: ::std::os::raw::c_short,
    pub clonetype: ::std::os::raw::c_short,
    pub size: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_FlexValue() {
    const UNINIT: ::std::mem::MaybeUninit<FlexValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FlexValue>(),
        16usize,
        concat!("Size of: ", stringify!(FlexValue))
    );
    assert_eq!(
        ::std::mem::align_of::<FlexValue>(),
        4usize,
        concat!("Alignment of ", stringify!(FlexValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(FlexValue), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).myid) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(FlexValue), "::", stringify!(myid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customid) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(FlexValue), "::", stringify!(customid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clonetype) as usize - ptr as usize },
        6usize,
        concat!("Offset of field: ", stringify!(FlexValue), "::", stringify!(clonetype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(FlexValue), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(FlexValue), "::", stringify!(ptr))
    );
}
impl Default for FlexValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const HSPERROR_HSPERR_NONE: HSPERROR = 0;
pub const HSPERROR_HSPERR_UNKNOWN_CODE: HSPERROR = 1;
pub const HSPERROR_HSPERR_SYNTAX: HSPERROR = 2;
pub const HSPERROR_HSPERR_ILLEGAL_FUNCTION: HSPERROR = 3;
pub const HSPERROR_HSPERR_WRONG_EXPRESSION: HSPERROR = 4;
pub const HSPERROR_HSPERR_NO_DEFAULT: HSPERROR = 5;
pub const HSPERROR_HSPERR_TYPE_MISMATCH: HSPERROR = 6;
pub const HSPERROR_HSPERR_ARRAY_OVERFLOW: HSPERROR = 7;
pub const HSPERROR_HSPERR_LABEL_REQUIRED: HSPERROR = 8;
pub const HSPERROR_HSPERR_TOO_MANY_NEST: HSPERROR = 9;
pub const HSPERROR_HSPERR_RETURN_WITHOUT_GOSUB: HSPERROR = 10;
pub const HSPERROR_HSPERR_LOOP_WITHOUT_REPEAT: HSPERROR = 11;
pub const HSPERROR_HSPERR_FILE_IO: HSPERROR = 12;
pub const HSPERROR_HSPERR_PICTURE_MISSING: HSPERROR = 13;
pub const HSPERROR_HSPERR_EXTERNAL_EXECUTE: HSPERROR = 14;
pub const HSPERROR_HSPERR_PRIORITY: HSPERROR = 15;
pub const HSPERROR_HSPERR_TOO_MANY_PARAMETERS: HSPERROR = 16;
pub const HSPERROR_HSPERR_TEMP_BUFFER_OVERFLOW: HSPERROR = 17;
pub const HSPERROR_HSPERR_WRONG_NAME: HSPERROR = 18;
pub const HSPERROR_HSPERR_DIVIDED_BY_ZERO: HSPERROR = 19;
pub const HSPERROR_HSPERR_BUFFER_OVERFLOW: HSPERROR = 20;
pub const HSPERROR_HSPERR_UNSUPPORTED_FUNCTION: HSPERROR = 21;
pub const HSPERROR_HSPERR_EXPRESSION_COMPLEX: HSPERROR = 22;
pub const HSPERROR_HSPERR_VARIABLE_REQUIRED: HSPERROR = 23;
pub const HSPERROR_HSPERR_INTEGER_REQUIRED: HSPERROR = 24;
pub const HSPERROR_HSPERR_BAD_ARRAY_EXPRESSION: HSPERROR = 25;
pub const HSPERROR_HSPERR_OUT_OF_MEMORY: HSPERROR = 26;
pub const HSPERROR_HSPERR_TYPE_INITALIZATION_FAILED: HSPERROR = 27;
pub const HSPERROR_HSPERR_NO_FUNCTION_PARAMETERS: HSPERROR = 28;
pub const HSPERROR_HSPERR_STACK_OVERFLOW: HSPERROR = 29;
pub const HSPERROR_HSPERR_INVALID_PARAMETER: HSPERROR = 30;
pub const HSPERROR_HSPERR_INVALID_ARRAYSTORE: HSPERROR = 31;
pub const HSPERROR_HSPERR_INVALID_FUNCPARAM: HSPERROR = 32;
pub const HSPERROR_HSPERR_WINDOW_OBJECT_FULL: HSPERROR = 33;
pub const HSPERROR_HSPERR_INVALID_ARRAY: HSPERROR = 34;
pub const HSPERROR_HSPERR_STRUCT_REQUIRED: HSPERROR = 35;
pub const HSPERROR_HSPERR_INVALID_STRUCT_SOURCE: HSPERROR = 36;
pub const HSPERROR_HSPERR_INVALID_TYPE: HSPERROR = 37;
pub const HSPERROR_HSPERR_DLL_ERROR: HSPERROR = 38;
pub const HSPERROR_HSPERR_COMDLL_ERROR: HSPERROR = 39;
pub const HSPERROR_HSPERR_NORETVAL: HSPERROR = 40;
pub const HSPERROR_HSPERR_FUNCTION_SYNTAX: HSPERROR = 41;
pub const HSPERROR_HSPERR_INVALID_CALLBACK: HSPERROR = 42;
pub const HSPERROR_HSPERR_INTJUMP: HSPERROR = 43;
pub const HSPERROR_HSPERR_EXITRUN: HSPERROR = 44;
pub const HSPERROR_HSPERR_MAX: HSPERROR = 45;
pub type HSPERROR = ::std::os::raw::c_uint;
pub const DEBUGINFO_GENERAL: _bindgen_ty_2 = 0;
pub const DEBUGINFO_VARNAME: _bindgen_ty_2 = 1;
pub const DEBUGINFO_INTINFO: _bindgen_ty_2 = 2;
pub const DEBUGINFO_GRINFO: _bindgen_ty_2 = 3;
pub const DEBUGINFO_MMINFO: _bindgen_ty_2 = 4;
pub const DEBUGINFO_MAX: _bindgen_ty_2 = 5;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const HSPDEBUG_NONE: _bindgen_ty_3 = 0;
pub const HSPDEBUG_RUN: _bindgen_ty_3 = 1;
pub const HSPDEBUG_STOP: _bindgen_ty_3 = 2;
pub const HSPDEBUG_STEPIN: _bindgen_ty_3 = 3;
pub const HSPDEBUG_STEPOVER: _bindgen_ty_3 = 4;
pub const HSPDEBUG_MAX: _bindgen_ty_3 = 5;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HSP3DEBUG {
    pub flag: ::std::os::raw::c_int,
    pub line: ::std::os::raw::c_int,
    pub fname: *mut ::std::os::raw::c_char,
    pub dbgwin: *mut ::std::os::raw::c_void,
    pub dbgval: *mut ::std::os::raw::c_char,
    pub hspctx: *mut HSPCTX,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
    >,
    pub get_varinf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub dbg_close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
    pub dbg_curinf: ::std::option::Option<unsafe extern "C" fn()>,
    pub dbg_set: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub dbg_callstack: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_HSP3DEBUG() {
    const UNINIT: ::std::mem::MaybeUninit<HSP3DEBUG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSP3DEBUG>(),
        48usize,
        concat!("Size of: ", stringify!(HSP3DEBUG))
    );
    assert_eq!(
        ::std::mem::align_of::<HSP3DEBUG>(),
        4usize,
        concat!("Alignment of ", stringify!(HSP3DEBUG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(line))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(fname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgwin) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(dbgwin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbgval) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(dbgval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hspctx) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(hspctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_value) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(get_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_varinf) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(get_varinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbg_close) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(dbg_close))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbg_curinf) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(dbg_curinf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbg_set) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(dbg_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dbg_callstack) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(HSP3DEBUG), "::", stringify!(dbg_callstack))
    );
}
impl Default for HSP3DEBUG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HSPHED {
    pub h1: ::std::os::raw::c_char,
    pub h2: ::std::os::raw::c_char,
    pub h3: ::std::os::raw::c_char,
    pub h4: ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_int,
    pub max_val: ::std::os::raw::c_int,
    pub allsize: ::std::os::raw::c_int,
    pub pt_cs: ::std::os::raw::c_int,
    pub max_cs: ::std::os::raw::c_int,
    pub pt_ds: ::std::os::raw::c_int,
    pub max_ds: ::std::os::raw::c_int,
    pub pt_ot: ::std::os::raw::c_int,
    pub max_ot: ::std::os::raw::c_int,
    pub pt_dinfo: ::std::os::raw::c_int,
    pub max_dinfo: ::std::os::raw::c_int,
    pub pt_linfo: ::std::os::raw::c_int,
    pub max_linfo: ::std::os::raw::c_int,
    pub pt_finfo: ::std::os::raw::c_int,
    pub max_finfo: ::std::os::raw::c_int,
    pub pt_minfo: ::std::os::raw::c_int,
    pub max_minfo: ::std::os::raw::c_int,
    pub pt_finfo2: ::std::os::raw::c_int,
    pub max_finfo2: ::std::os::raw::c_int,
    pub pt_hpidat: ::std::os::raw::c_int,
    pub max_hpi: ::std::os::raw::c_short,
    pub max_varhpi: ::std::os::raw::c_short,
    pub bootoption: ::std::os::raw::c_int,
    pub runtime: ::std::os::raw::c_int,
    pub pt_sr: ::std::os::raw::c_int,
    pub max_sr: ::std::os::raw::c_int,
    pub pt_exopt: ::std::os::raw::c_int,
    pub max_exopt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HSPHED() {
    const UNINIT: ::std::mem::MaybeUninit<HSPHED> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSPHED>(),
        112usize,
        concat!("Size of: ", stringify!(HSPHED))
    );
    assert_eq!(
        ::std::mem::align_of::<HSPHED>(),
        4usize,
        concat!("Alignment of ", stringify!(HSPHED))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h1) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(h1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h2) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(h2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h3) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(h3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h4) as usize - ptr as usize },
        3usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(h4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_val) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_val))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allsize) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(allsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_cs) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_cs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cs) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_cs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_ds) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_ds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ds) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_ds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_ot) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_ot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ot) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_ot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_dinfo) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_dinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dinfo) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_dinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_linfo) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_linfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_linfo) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_linfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_finfo) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_finfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_finfo) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_finfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_minfo) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_minfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_minfo) as usize - ptr as usize },
        68usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_minfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_finfo2) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_finfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_finfo2) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_finfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_hpidat) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_hpidat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_hpi) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_hpi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_varhpi) as usize - ptr as usize },
        86usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_varhpi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bootoption) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(bootoption))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtime) as usize - ptr as usize },
        92usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(runtime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_sr) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_sr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sr) as usize - ptr as usize },
        100usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_sr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt_exopt) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(pt_exopt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_exopt) as usize - ptr as usize },
        108usize,
        concat!("Offset of field: ", stringify!(HSPHED), "::", stringify!(max_exopt))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct MEM_HPIDAT {
    pub flag: ::std::os::raw::c_short,
    pub option: ::std::os::raw::c_short,
    pub libname: ::std::os::raw::c_int,
    pub funcname: ::std::os::raw::c_int,
    pub libptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MEM_HPIDAT() {
    const UNINIT: ::std::mem::MaybeUninit<MEM_HPIDAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MEM_HPIDAT>(),
        16usize,
        concat!("Size of: ", stringify!(MEM_HPIDAT))
    );
    assert_eq!(
        ::std::mem::align_of::<MEM_HPIDAT>(),
        4usize,
        concat!("Alignment of ", stringify!(MEM_HPIDAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(MEM_HPIDAT), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(MEM_HPIDAT), "::", stringify!(option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libname) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(MEM_HPIDAT), "::", stringify!(libname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcname) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(MEM_HPIDAT), "::", stringify!(funcname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libptr) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(MEM_HPIDAT), "::", stringify!(libptr))
    );
}
impl Default for MEM_HPIDAT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HPIDAT = MEM_HPIDAT;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct LIBDAT {
    pub flag: ::std::os::raw::c_int,
    pub nameidx: ::std::os::raw::c_int,
    pub hlib: *mut ::std::os::raw::c_void,
    pub clsid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LIBDAT() {
    const UNINIT: ::std::mem::MaybeUninit<LIBDAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LIBDAT>(),
        16usize,
        concat!("Size of: ", stringify!(LIBDAT))
    );
    assert_eq!(
        ::std::mem::align_of::<LIBDAT>(),
        4usize,
        concat!("Alignment of ", stringify!(LIBDAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(LIBDAT), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameidx) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(LIBDAT), "::", stringify!(nameidx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hlib) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(LIBDAT), "::", stringify!(hlib))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clsid) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(LIBDAT), "::", stringify!(clsid))
    );
}
impl Default for LIBDAT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HED_LIBDAT = LIBDAT;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct STRUCTPRM {
    pub mptype: ::std::os::raw::c_short,
    pub subid: ::std::os::raw::c_short,
    pub offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_STRUCTPRM() {
    const UNINIT: ::std::mem::MaybeUninit<STRUCTPRM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<STRUCTPRM>(),
        8usize,
        concat!("Size of: ", stringify!(STRUCTPRM))
    );
    assert_eq!(
        ::std::mem::align_of::<STRUCTPRM>(),
        4usize,
        concat!("Alignment of ", stringify!(STRUCTPRM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mptype) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(STRUCTPRM), "::", stringify!(mptype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subid) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(STRUCTPRM), "::", stringify!(subid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(STRUCTPRM), "::", stringify!(offset))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct STRUCTDAT {
    pub index: ::std::os::raw::c_short,
    pub subid: ::std::os::raw::c_short,
    pub prmindex: ::std::os::raw::c_int,
    pub prmmax: ::std::os::raw::c_int,
    pub nameidx: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub otindex: ::std::os::raw::c_int,
    pub __bindgen_anon_1: STRUCTDAT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union STRUCTDAT__bindgen_ty_1 {
    pub proc_: *mut ::std::os::raw::c_void,
    pub funcflag: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_STRUCTDAT__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<STRUCTDAT__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<STRUCTDAT__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(STRUCTDAT__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<STRUCTDAT__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(STRUCTDAT__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(STRUCTDAT__bindgen_ty_1),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(STRUCTDAT__bindgen_ty_1),
            "::",
            stringify!(funcflag)
        )
    );
}
impl Default for STRUCTDAT__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for STRUCTDAT__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "STRUCTDAT__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_STRUCTDAT() {
    const UNINIT: ::std::mem::MaybeUninit<STRUCTDAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<STRUCTDAT>(),
        28usize,
        concat!("Size of: ", stringify!(STRUCTDAT))
    );
    assert_eq!(
        ::std::mem::align_of::<STRUCTDAT>(),
        4usize,
        concat!("Alignment of ", stringify!(STRUCTDAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(index))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subid) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(subid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prmindex) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(prmindex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prmmax) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(prmmax))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nameidx) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(nameidx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).otindex) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(STRUCTDAT), "::", stringify!(otindex))
    );
}
impl Default for STRUCTDAT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for STRUCTDAT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "STRUCTDAT {{ index: {:?}, subid: {:?}, prmindex: {:?}, prmmax: {:?}, nameidx: {:?}, size: {:?}, otindex: {:?}, __bindgen_anon_1: {:?} }}" , self . index , self . subid , self . prmindex , self . prmmax , self . nameidx , self . size , self . otindex , self . __bindgen_anon_1)
    }
}
pub type HED_STRUCTDAT = STRUCTDAT;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct MPVarData {
    pub pval: *mut PVal,
    pub aptr: APTR,
}
#[test]
fn bindgen_test_layout_MPVarData() {
    const UNINIT: ::std::mem::MaybeUninit<MPVarData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MPVarData>(),
        8usize,
        concat!("Size of: ", stringify!(MPVarData))
    );
    assert_eq!(
        ::std::mem::align_of::<MPVarData>(),
        4usize,
        concat!("Alignment of ", stringify!(MPVarData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pval) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(MPVarData), "::", stringify!(pval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aptr) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(MPVarData), "::", stringify!(aptr))
    );
}
impl Default for MPVarData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct MPModVarData {
    pub subid: ::std::os::raw::c_short,
    pub magic: ::std::os::raw::c_short,
    pub pval: *mut PVal,
    pub aptr: APTR,
}
#[test]
fn bindgen_test_layout_MPModVarData() {
    const UNINIT: ::std::mem::MaybeUninit<MPModVarData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MPModVarData>(),
        12usize,
        concat!("Size of: ", stringify!(MPModVarData))
    );
    assert_eq!(
        ::std::mem::align_of::<MPModVarData>(),
        4usize,
        concat!("Alignment of ", stringify!(MPModVarData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subid) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(MPModVarData), "::", stringify!(subid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(MPModVarData), "::", stringify!(magic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pval) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(MPModVarData), "::", stringify!(pval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aptr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(MPModVarData), "::", stringify!(aptr))
    );
}
impl Default for MPModVarData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct IRQDAT {
    pub flag: ::std::os::raw::c_short,
    pub opt: ::std::os::raw::c_short,
    pub custom: ::std::os::raw::c_int,
    pub custom2: ::std::os::raw::c_int,
    pub iparam: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_ushort,
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut IRQDAT,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_IRQDAT() {
    const UNINIT: ::std::mem::MaybeUninit<IRQDAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IRQDAT>(),
        24usize,
        concat!("Size of: ", stringify!(IRQDAT))
    );
    assert_eq!(
        ::std::mem::align_of::<IRQDAT>(),
        4usize,
        concat!("Alignment of ", stringify!(IRQDAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(opt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(custom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom2) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(custom2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iparam) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(iparam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(ptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(IRQDAT), "::", stringify!(callback))
    );
}
impl Default for IRQDAT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HSPEXINFO30 {
    pub ver: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub er: *mut ::std::os::raw::c_int,
    pub pstr: *mut ::std::os::raw::c_char,
    pub stmp: *mut ::std::os::raw::c_char,
    pub mpval: *mut *mut PVal,
    pub actscr: *mut ::std::os::raw::c_int,
    pub nptype: *mut ::std::os::raw::c_int,
    pub npval: *mut ::std::os::raw::c_int,
    pub strsize: *mut ::std::os::raw::c_int,
    pub refstr: *mut ::std::os::raw::c_char,
    pub HspFunc_prm_getv:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub HspFunc_prm_geti: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub HspFunc_prm_getdi: ::std::option::Option<
        unsafe extern "C" fn(defval: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_prm_gets:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub HspFunc_prm_getds: ::std::option::Option<
        unsafe extern "C" fn(defstr: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_val_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            pv: *mut PVal,
            size: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_fread: ::std::option::Option<
        unsafe extern "C" fn(
            fname: *mut ::std::os::raw::c_char,
            readmem: *mut ::std::os::raw::c_void,
            rlen: ::std::os::raw::c_int,
            seekofs: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_fsize: ::std::option::Option<
        unsafe extern "C" fn(fname: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_getbmscr: ::std::option::Option<
        unsafe extern "C" fn(wid: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void,
    >,
    pub HspFunc_getobj: ::std::option::Option<
        unsafe extern "C" fn(
            wid: ::std::os::raw::c_int,
            id: ::std::os::raw::c_int,
            inf: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_setobj: ::std::option::Option<
        unsafe extern "C" fn(
            wid: ::std::os::raw::c_int,
            id: ::std::os::raw::c_int,
            inf: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub npexflg: *mut ::std::os::raw::c_int,
    pub hspctx: *mut HSPCTX,
    pub HspFunc_addobj: ::std::option::Option<
        unsafe extern "C" fn(wid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_puterror: ::std::option::Option<unsafe extern "C" fn(error: HSPERROR)>,
    pub HspFunc_getproc: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int) -> *mut HspVarProc,
    >,
    pub HspFunc_seekproc: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut HspVarProc,
    >,
    pub HspFunc_prm_next: ::std::option::Option<unsafe extern "C" fn()>,
    pub HspFunc_prm_get: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub HspFunc_prm_getd: ::std::option::Option<unsafe extern "C" fn() -> f64>,
    pub HspFunc_prm_getdd: ::std::option::Option<unsafe extern "C" fn(defval: f64) -> f64>,
    pub HspFunc_prm_getlb:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_ushort>,
    pub HspFunc_prm_getpval: ::std::option::Option<unsafe extern "C" fn() -> *mut PVal>,
    pub HspFunc_prm_getva:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut *mut PVal) -> APTR>,
    pub HspFunc_prm_setva: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            aptr: APTR,
            type_: ::std::os::raw::c_int,
            ptr: *const ::std::os::raw::c_void,
        ),
    >,
    pub HspFunc_malloc: ::std::option::Option<
        unsafe extern "C" fn(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub HspFunc_expand: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_addirq: ::std::option::Option<unsafe extern "C" fn() -> *mut IRQDAT>,
    pub HspFunc_hspevent: ::std::option::Option<
        unsafe extern "C" fn(
            event: ::std::os::raw::c_int,
            prm1: ::std::os::raw::c_int,
            prm2: ::std::os::raw::c_int,
            prm3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_registvar: ::std::option::Option<
        unsafe extern "C" fn(flag: ::std::os::raw::c_int, func: HSPVAR_COREFUNC),
    >,
    pub HspFunc_setpc:
        ::std::option::Option<unsafe extern "C" fn(pc: *const ::std::os::raw::c_ushort)>,
    pub HspFunc_call:
        ::std::option::Option<unsafe extern "C" fn(pc: *const ::std::os::raw::c_ushort)>,
    pub HspFunc_mref:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal, prm: ::std::os::raw::c_int)>,
    pub HspFunc_dim: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            flag: ::std::os::raw::c_int,
            len0: ::std::os::raw::c_int,
            len1: ::std::os::raw::c_int,
            len2: ::std::os::raw::c_int,
            len3: ::std::os::raw::c_int,
            len4: ::std::os::raw::c_int,
        ),
    >,
    pub HspFunc_redim: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            lenid: ::std::os::raw::c_int,
            len: ::std::os::raw::c_int,
        ),
    >,
    pub HspFunc_array:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal, offset: ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_HSPEXINFO30() {
    const UNINIT: ::std::mem::MaybeUninit<HSPEXINFO30> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSPEXINFO30>(),
        188usize,
        concat!("Size of: ", stringify!(HSPEXINFO30))
    );
    assert_eq!(
        ::std::mem::align_of::<HSPEXINFO30>(),
        4usize,
        concat!("Alignment of ", stringify!(HSPEXINFO30))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(ver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).er) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(er))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(pstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stmp) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(stmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpval) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(mpval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actscr) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(actscr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nptype) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(nptype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npval) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(npval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strsize) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(strsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refstr) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(refstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getv) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_prm_getv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_geti) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_prm_geti))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getdi) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_getdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_gets) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_prm_gets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getds) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_getds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_val_realloc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_val_realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_fread) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_fread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_fsize) as usize - ptr as usize },
        68usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_fsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_getbmscr) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_getbmscr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_getobj) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_getobj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_setobj) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_setobj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npexflg) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(npexflg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hspctx) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(hspctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_addobj) as usize - ptr as usize },
        92usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_addobj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_puterror) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_puterror))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_getproc) as usize - ptr as usize },
        100usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_getproc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_seekproc) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_seekproc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_next) as usize - ptr as usize },
        108usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_prm_next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_get) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_prm_get))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getd) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_prm_getd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getdd) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_getdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getlb) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_getlb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getpval) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_getpval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getva) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_getva)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_setva) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_prm_setva)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_malloc) as usize - ptr as usize },
        140usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_malloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_free) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_free))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_expand) as usize - ptr as usize },
        148usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_expand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_addirq) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_addirq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_hspevent) as usize - ptr as usize },
        156usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_hspevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_registvar) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO30),
            "::",
            stringify!(HspFunc_registvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_setpc) as usize - ptr as usize },
        164usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_setpc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_call) as usize - ptr as usize },
        168usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_call))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_mref) as usize - ptr as usize },
        172usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_mref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_dim) as usize - ptr as usize },
        176usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_dim))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_redim) as usize - ptr as usize },
        180usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_redim))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_array) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO30), "::", stringify!(HspFunc_array))
    );
}
impl Default for HSPEXINFO30 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HSPEXINFO {
    pub ver: ::std::os::raw::c_short,
    pub min: ::std::os::raw::c_short,
    pub er: *mut ::std::os::raw::c_int,
    pub pstr: *mut ::std::os::raw::c_char,
    pub stmp: *mut ::std::os::raw::c_char,
    pub mpval: *mut *mut PVal,
    pub actscr: *mut ::std::os::raw::c_int,
    pub nptype: *mut ::std::os::raw::c_int,
    pub npval: *mut ::std::os::raw::c_int,
    pub strsize: *mut ::std::os::raw::c_int,
    pub refstr: *mut ::std::os::raw::c_char,
    pub HspFunc_prm_getv:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub HspFunc_prm_geti: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub HspFunc_prm_getdi: ::std::option::Option<
        unsafe extern "C" fn(defval: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_prm_gets:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub HspFunc_prm_getds: ::std::option::Option<
        unsafe extern "C" fn(defstr: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_val_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            pv: *mut PVal,
            size: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_fread: ::std::option::Option<
        unsafe extern "C" fn(
            fname: *mut ::std::os::raw::c_char,
            readmem: *mut ::std::os::raw::c_void,
            rlen: ::std::os::raw::c_int,
            seekofs: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_fsize: ::std::option::Option<
        unsafe extern "C" fn(fname: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_getbmscr: ::std::option::Option<
        unsafe extern "C" fn(wid: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void,
    >,
    pub HspFunc_getobj: ::std::option::Option<
        unsafe extern "C" fn(
            wid: ::std::os::raw::c_int,
            id: ::std::os::raw::c_int,
            inf: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_setobj: ::std::option::Option<
        unsafe extern "C" fn(
            wid: ::std::os::raw::c_int,
            id: ::std::os::raw::c_int,
            inf: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub npexflg: *mut ::std::os::raw::c_int,
    pub hspctx: *mut HSPCTX,
    pub HspFunc_addobj: ::std::option::Option<
        unsafe extern "C" fn(wid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_puterror: ::std::option::Option<unsafe extern "C" fn(error: HSPERROR)>,
    pub HspFunc_getproc: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int) -> *mut HspVarProc,
    >,
    pub HspFunc_seekproc: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut HspVarProc,
    >,
    pub HspFunc_prm_next: ::std::option::Option<unsafe extern "C" fn()>,
    pub HspFunc_prm_get: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub HspFunc_prm_getd: ::std::option::Option<unsafe extern "C" fn() -> f64>,
    pub HspFunc_prm_getdd: ::std::option::Option<unsafe extern "C" fn(defval: f64) -> f64>,
    pub HspFunc_prm_getlb:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_ushort>,
    pub HspFunc_prm_getpval: ::std::option::Option<unsafe extern "C" fn() -> *mut PVal>,
    pub HspFunc_prm_getva:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut *mut PVal) -> APTR>,
    pub HspFunc_prm_setva: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            aptr: APTR,
            type_: ::std::os::raw::c_int,
            ptr: *const ::std::os::raw::c_void,
        ),
    >,
    pub HspFunc_malloc: ::std::option::Option<
        unsafe extern "C" fn(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    pub HspFunc_expand: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_addirq: ::std::option::Option<unsafe extern "C" fn() -> *mut IRQDAT>,
    pub HspFunc_hspevent: ::std::option::Option<
        unsafe extern "C" fn(
            event: ::std::os::raw::c_int,
            prm1: ::std::os::raw::c_int,
            prm2: ::std::os::raw::c_int,
            prm3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_registvar: ::std::option::Option<
        unsafe extern "C" fn(flag: ::std::os::raw::c_int, func: HSPVAR_COREFUNC),
    >,
    pub HspFunc_setpc:
        ::std::option::Option<unsafe extern "C" fn(pc: *const ::std::os::raw::c_ushort)>,
    pub HspFunc_call:
        ::std::option::Option<unsafe extern "C" fn(pc: *const ::std::os::raw::c_ushort)>,
    pub HspFunc_mref:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal, prm: ::std::os::raw::c_int)>,
    pub HspFunc_dim: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            flag: ::std::os::raw::c_int,
            len0: ::std::os::raw::c_int,
            len1: ::std::os::raw::c_int,
            len2: ::std::os::raw::c_int,
            len3: ::std::os::raw::c_int,
            len4: ::std::os::raw::c_int,
        ),
    >,
    pub HspFunc_redim: ::std::option::Option<
        unsafe extern "C" fn(
            pval: *mut PVal,
            lenid: ::std::os::raw::c_int,
            len: ::std::os::raw::c_int,
        ),
    >,
    pub HspFunc_array:
        ::std::option::Option<unsafe extern "C" fn(pval: *mut PVal, offset: ::std::os::raw::c_int)>,
    pub HspFunc_varname: ::std::option::Option<
        unsafe extern "C" fn(id: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
    >,
    pub HspFunc_seekvar: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub HspFunc_prm_getns:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub HspFunc_prm_getnds: ::std::option::Option<
        unsafe extern "C" fn(defstr: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_HSPEXINFO() {
    const UNINIT: ::std::mem::MaybeUninit<HSPEXINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSPEXINFO>(),
        204usize,
        concat!("Size of: ", stringify!(HSPEXINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<HSPEXINFO>(),
        4usize,
        concat!("Alignment of ", stringify!(HSPEXINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(ver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).er) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(er))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstr) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(pstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stmp) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(stmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpval) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(mpval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actscr) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(actscr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nptype) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(nptype))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npval) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(npval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strsize) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(strsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refstr) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(refstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getv) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_geti) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_geti))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getdi) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getdi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_gets) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_gets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getds) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_val_realloc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO),
            "::",
            stringify!(HspFunc_val_realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_fread) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_fread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_fsize) as usize - ptr as usize },
        68usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_fsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_getbmscr) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_getbmscr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_getobj) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_getobj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_setobj) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_setobj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npexflg) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(npexflg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hspctx) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(hspctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_addobj) as usize - ptr as usize },
        92usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_addobj))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_puterror) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_puterror))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_getproc) as usize - ptr as usize },
        100usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_getproc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_seekproc) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_seekproc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_next) as usize - ptr as usize },
        108usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_next))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_get) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_get))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getd) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getdd) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getdd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getlb) as usize - ptr as usize },
        124usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getlb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getpval) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(HSPEXINFO),
            "::",
            stringify!(HspFunc_prm_getpval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getva) as usize - ptr as usize },
        132usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getva))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_setva) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_setva))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_malloc) as usize - ptr as usize },
        140usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_malloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_free) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_free))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_expand) as usize - ptr as usize },
        148usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_expand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_addirq) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_addirq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_hspevent) as usize - ptr as usize },
        156usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_hspevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_registvar) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_registvar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_setpc) as usize - ptr as usize },
        164usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_setpc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_call) as usize - ptr as usize },
        168usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_call))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_mref) as usize - ptr as usize },
        172usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_mref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_dim) as usize - ptr as usize },
        176usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_dim))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_redim) as usize - ptr as usize },
        180usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_redim))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_array) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_varname) as usize - ptr as usize },
        188usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_varname))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_seekvar) as usize - ptr as usize },
        192usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_seekvar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getns) as usize - ptr as usize },
        196usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HspFunc_prm_getnds) as usize - ptr as usize },
        200usize,
        concat!("Offset of field: ", stringify!(HSPEXINFO), "::", stringify!(HspFunc_prm_getnds))
    );
}
impl Default for HSPEXINFO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct LOOPDAT {
    pub time: ::std::os::raw::c_int,
    pub cnt: ::std::os::raw::c_int,
    pub step: ::std::os::raw::c_int,
    pub pt: *mut ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_LOOPDAT() {
    const UNINIT: ::std::mem::MaybeUninit<LOOPDAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LOOPDAT>(),
        16usize,
        concat!("Size of: ", stringify!(LOOPDAT))
    );
    assert_eq!(
        ::std::mem::align_of::<LOOPDAT>(),
        4usize,
        concat!("Alignment of ", stringify!(LOOPDAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(LOOPDAT), "::", stringify!(time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(LOOPDAT), "::", stringify!(cnt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(LOOPDAT), "::", stringify!(step))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pt) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(LOOPDAT), "::", stringify!(pt))
    );
}
impl Default for LOOPDAT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const RUNMODE_RUN: _bindgen_ty_4 = 0;
pub const RUNMODE_WAIT: _bindgen_ty_4 = 1;
pub const RUNMODE_AWAIT: _bindgen_ty_4 = 2;
pub const RUNMODE_STOP: _bindgen_ty_4 = 3;
pub const RUNMODE_END: _bindgen_ty_4 = 4;
pub const RUNMODE_ERROR: _bindgen_ty_4 = 5;
pub const RUNMODE_RETURN: _bindgen_ty_4 = 6;
pub const RUNMODE_INTJUMP: _bindgen_ty_4 = 7;
pub const RUNMODE_ASSERT: _bindgen_ty_4 = 8;
pub const RUNMODE_LOGMES: _bindgen_ty_4 = 9;
pub const RUNMODE_EXITRUN: _bindgen_ty_4 = 10;
pub const RUNMODE_RESTART: _bindgen_ty_4 = 11;
pub const RUNMODE_MAX: _bindgen_ty_4 = 12;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct HSPCTX {
    pub hsphed: *mut HSPHED,
    pub mcs: *mut ::std::os::raw::c_ushort,
    pub mem_mcs: *mut ::std::os::raw::c_ushort,
    pub mem_mds: *mut ::std::os::raw::c_char,
    pub mem_di: *mut ::std::os::raw::c_uchar,
    pub mem_ot: *mut ::std::os::raw::c_int,
    pub mem_irq: *mut IRQDAT,
    pub irqmax: ::std::os::raw::c_int,
    pub iparam: ::std::os::raw::c_int,
    pub wparam: ::std::os::raw::c_int,
    pub lparam: ::std::os::raw::c_int,
    pub mem_var: *mut PVal,
    pub exinfo: HSPEXINFO30,
    pub runmode: ::std::os::raw::c_int,
    pub waitcount: ::std::os::raw::c_int,
    pub waitbase: ::std::os::raw::c_int,
    pub waittick: ::std::os::raw::c_int,
    pub lasttick: ::std::os::raw::c_int,
    pub sublev: ::std::os::raw::c_int,
    pub mem_loop: [LOOPDAT; 32usize],
    pub looplev: ::std::os::raw::c_int,
    pub err: HSPERROR,
    pub hspstat: ::std::os::raw::c_int,
    pub stat: ::std::os::raw::c_int,
    pub strsize: ::std::os::raw::c_int,
    pub refstr: *mut ::std::os::raw::c_char,
    pub fnbuffer: *mut ::std::os::raw::c_char,
    pub instance: *mut ::std::os::raw::c_void,
    pub intwnd_id: ::std::os::raw::c_int,
    pub note_pval: *mut PVal,
    pub note_aptr: APTR,
    pub notep_pval: *mut PVal,
    pub notep_aptr: APTR,
    pub stmp: *mut ::std::os::raw::c_char,
    pub prmstack: *mut ::std::os::raw::c_void,
    pub mem_linfo: *mut LIBDAT,
    pub mem_minfo: *mut STRUCTPRM,
    pub mem_finfo: *mut STRUCTDAT,
    pub retval_level: ::std::os::raw::c_int,
    pub endcode: ::std::os::raw::c_int,
    pub msgfunc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut HSPCTX)>,
    pub wnd_parent: *mut ::std::os::raw::c_void,
    pub refdval: f64,
    pub cmdline: *mut ::std::os::raw::c_char,
    pub exinfo2: *mut HSPEXINFO,
    pub prmstack_max: ::std::os::raw::c_int,
    pub dsindex: *mut ::std::os::raw::c_int,
    pub dsindex_size: ::std::os::raw::c_int,
    pub language: ::std::os::raw::c_int,
    pub callback_flag: ::std::os::raw::c_int,
    pub modfilename: *mut ::std::os::raw::c_char,
    pub tvfoldername: *mut ::std::os::raw::c_char,
    pub homefoldername: *mut ::std::os::raw::c_char,
    pub langcode: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_HSPCTX() {
    const UNINIT: ::std::mem::MaybeUninit<HSPCTX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSPCTX>(),
        920usize,
        concat!("Size of: ", stringify!(HSPCTX))
    );
    assert_eq!(
        ::std::mem::align_of::<HSPCTX>(),
        8usize,
        concat!("Alignment of ", stringify!(HSPCTX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hsphed) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(hsphed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcs) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_mcs) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_mcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_mds) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_mds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_di) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_di))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_ot) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_ot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_irq) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_irq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irqmax) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(irqmax))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iparam) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(iparam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wparam) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(wparam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lparam) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(lparam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_var) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_var))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exinfo) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(exinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runmode) as usize - ptr as usize },
        236usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(runmode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitcount) as usize - ptr as usize },
        240usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(waitcount))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitbase) as usize - ptr as usize },
        244usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(waitbase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waittick) as usize - ptr as usize },
        248usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(waittick))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lasttick) as usize - ptr as usize },
        252usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(lasttick))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sublev) as usize - ptr as usize },
        256usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(sublev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_loop) as usize - ptr as usize },
        260usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_loop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).looplev) as usize - ptr as usize },
        772usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(looplev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        776usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(err))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hspstat) as usize - ptr as usize },
        780usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(hspstat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        784usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strsize) as usize - ptr as usize },
        788usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(strsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refstr) as usize - ptr as usize },
        792usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(refstr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnbuffer) as usize - ptr as usize },
        796usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(fnbuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        800usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(instance))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intwnd_id) as usize - ptr as usize },
        804usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(intwnd_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_pval) as usize - ptr as usize },
        808usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(note_pval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).note_aptr) as usize - ptr as usize },
        812usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(note_aptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notep_pval) as usize - ptr as usize },
        816usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(notep_pval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notep_aptr) as usize - ptr as usize },
        820usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(notep_aptr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stmp) as usize - ptr as usize },
        824usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(stmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prmstack) as usize - ptr as usize },
        828usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(prmstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_linfo) as usize - ptr as usize },
        832usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_linfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_minfo) as usize - ptr as usize },
        836usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_minfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_finfo) as usize - ptr as usize },
        840usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(mem_finfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval_level) as usize - ptr as usize },
        844usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(retval_level))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endcode) as usize - ptr as usize },
        848usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(endcode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgfunc) as usize - ptr as usize },
        852usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(msgfunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wnd_parent) as usize - ptr as usize },
        856usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(wnd_parent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refdval) as usize - ptr as usize },
        864usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(refdval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdline) as usize - ptr as usize },
        872usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(cmdline))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exinfo2) as usize - ptr as usize },
        876usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(exinfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prmstack_max) as usize - ptr as usize },
        880usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(prmstack_max))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsindex) as usize - ptr as usize },
        884usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(dsindex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsindex_size) as usize - ptr as usize },
        888usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(dsindex_size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).language) as usize - ptr as usize },
        892usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(language))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_flag) as usize - ptr as usize },
        896usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(callback_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modfilename) as usize - ptr as usize },
        900usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(modfilename))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tvfoldername) as usize - ptr as usize },
        904usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(tvfoldername))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).homefoldername) as usize - ptr as usize },
        908usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(homefoldername))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).langcode) as usize - ptr as usize },
        912usize,
        concat!("Offset of field: ", stringify!(HSPCTX), "::", stringify!(langcode))
    );
}
impl Default for HSPCTX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HSPROUTINE {
    pub stacklev: ::std::os::raw::c_int,
    pub mcsret: *mut ::std::os::raw::c_ushort,
    pub param: *mut STRUCTDAT,
    pub oldtack: *mut ::std::os::raw::c_void,
    pub oldlev: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HSPROUTINE() {
    const UNINIT: ::std::mem::MaybeUninit<HSPROUTINE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSPROUTINE>(),
        20usize,
        concat!("Size of: ", stringify!(HSPROUTINE))
    );
    assert_eq!(
        ::std::mem::align_of::<HSPROUTINE>(),
        4usize,
        concat!("Alignment of ", stringify!(HSPROUTINE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stacklev) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSPROUTINE), "::", stringify!(stacklev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcsret) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSPROUTINE), "::", stringify!(mcsret))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSPROUTINE), "::", stringify!(param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldtack) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSPROUTINE), "::", stringify!(oldtack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldlev) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSPROUTINE), "::", stringify!(oldlev))
    );
}
impl Default for HSPROUTINE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type HSP3_CMDFUNC = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type HSP3_REFFUNC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type HSP3_TERMFUNC = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type HSP3_MSGFUNC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type HSP3_EVENTFUNC = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct HSP3TYPEINFO {
    pub type_: ::std::os::raw::c_short,
    pub option: ::std::os::raw::c_short,
    pub hspctx: *mut HSPCTX,
    pub hspexinfo: *mut HSPEXINFO,
    pub cmdfunc: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub reffunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub termfunc: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub msgfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub eventfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_HSP3TYPEINFO() {
    const UNINIT: ::std::mem::MaybeUninit<HSP3TYPEINFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HSP3TYPEINFO>(),
        32usize,
        concat!("Size of: ", stringify!(HSP3TYPEINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<HSP3TYPEINFO>(),
        4usize,
        concat!("Alignment of ", stringify!(HSP3TYPEINFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hspctx) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(hspctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hspexinfo) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(hspexinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdfunc) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(cmdfunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reffunc) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(reffunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).termfunc) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(termfunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgfunc) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(msgfunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventfunc) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(HSP3TYPEINFO), "::", stringify!(eventfunc))
    );
}
impl Default for HSP3TYPEINFO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const HSPIRQ_ONEXIT: _bindgen_ty_5 = 0;
pub const HSPIRQ_ONERROR: _bindgen_ty_5 = 1;
pub const HSPIRQ_ONKEY: _bindgen_ty_5 = 2;
pub const HSPIRQ_ONCLICK: _bindgen_ty_5 = 3;
pub const HSPIRQ_USERDEF: _bindgen_ty_5 = 4;
pub const HSPIRQ_MAX: _bindgen_ty_5 = 5;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const HSPEVENT_NONE: _bindgen_ty_6 = 0;
pub const HSPEVENT_COMMAND: _bindgen_ty_6 = 1;
pub const HSPEVENT_HSPIRQ: _bindgen_ty_6 = 2;
pub const HSPEVENT_GETKEY: _bindgen_ty_6 = 3;
pub const HSPEVENT_STICK: _bindgen_ty_6 = 4;
pub const HSPEVENT_FNAME: _bindgen_ty_6 = 5;
pub const HSPEVENT_FREAD: _bindgen_ty_6 = 6;
pub const HSPEVENT_FWRITE: _bindgen_ty_6 = 7;
pub const HSPEVENT_FEXIST: _bindgen_ty_6 = 8;
pub const HSPEVENT_FDELETE: _bindgen_ty_6 = 9;
pub const HSPEVENT_FMKDIR: _bindgen_ty_6 = 10;
pub const HSPEVENT_FCHDIR: _bindgen_ty_6 = 11;
pub const HSPEVENT_FCOPY: _bindgen_ty_6 = 12;
pub const HSPEVENT_FDIRLIST1: _bindgen_ty_6 = 13;
pub const HSPEVENT_FDIRLIST2: _bindgen_ty_6 = 14;
pub const HSPEVENT_GETPICSIZE: _bindgen_ty_6 = 15;
pub const HSPEVENT_PICLOAD: _bindgen_ty_6 = 16;
pub const HSPEVENT_MAX: _bindgen_ty_6 = 17;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
